
import { VPSHealthMonitor } from "./vpsHealthMonitor";
import { VPSInstanceManager } from "./vpsInstanceManager";
import { OrphanInstanceValidator } from "./orphanInstanceValidator";
import { OrphanInstanceRecoverer } from "./orphanInstanceRecoverer";
import { StabilityQuarantineManager } from "./stabilityQuarantineManager";
import { VPS_CONFIG } from "../config/vpsConfig";
import { toast } from "sonner";

export type { OrphanInstance } from "./orphanInstanceValidator";

export class OrphanInstanceRecoveryService {
  /**
   * Encontra e recupera inst√¢ncias √≥rf√£s (VERS√ÉO OTIMIZADA)
   */
  static async findAndRecoverOrphanInstances(companyId: string): Promise<{
    found: any[];
    recovered: number;
    errors: string[];
  }> {
    try {
      console.log('[OrphanRecovery] üöÄ Iniciando busca OTIMIZADA por √≥rf√£s para empresa:', companyId);

      // 1. Valida√ß√£o inicial
      if (!companyId) {
        throw new Error('Company ID √© obrigat√≥rio');
      }

      // 2. Limpeza autom√°tica de quarentenas expiradas
      const cleanedQuarantines = StabilityQuarantineManager.cleanupExpiredQuarantines(VPS_CONFIG.recovery.quarantineDuration);
      if (cleanedQuarantines > 0) {
        console.log('[OrphanRecovery] üßπ', cleanedQuarantines, 'quarentenas expiradas removidas');
      }

      // 3. Verifica√ß√£o robusta de sa√∫de do VPS
      console.log('[OrphanRecovery] üè• Verificando sa√∫de do VPS...');
      const pingResult = await VPSHealthMonitor.pingVPS();
      
      if (!pingResult.success) {
        const errorMsg = `VPS n√£o responsivo (ping falhou): ${pingResult.error}`;
        console.error('[OrphanRecovery] ‚ùå', errorMsg);
        throw new Error(errorMsg);
      }

      // Verifica√ß√£o completa se ping OK
      const healthStatus = await VPSHealthMonitor.checkVPSHealth();
      
      if (!healthStatus.isOnline) {
        const errorMsg = `VPS offline ap√≥s ping OK: ${healthStatus.error}`;
        console.error('[OrphanRecovery] ‚ùå', errorMsg);
        throw new Error(errorMsg);
      }

      console.log('[OrphanRecovery] ‚úÖ VPS online e saud√°vel:', healthStatus.responseTime + 'ms');

      // 4. Buscar inst√¢ncias do VPS com retry robusto
      console.log('[OrphanRecovery] üì° Buscando inst√¢ncias do VPS...');
      const vpsInstances = await VPSInstanceManager.getVPSInstances();
      
      console.log('[OrphanRecovery] üìä Inst√¢ncias VPS encontradas:', vpsInstances.length);

      if (vpsInstances.length === 0) {
        console.log('[OrphanRecovery] ‚ÑπÔ∏è Nenhuma inst√¢ncia VPS ativa');
        return { found: [], recovered: 0, errors: [] };
      }

      // 5. Buscar inst√¢ncias do banco
      console.log('[OrphanRecovery] üóÑÔ∏è Buscando inst√¢ncias do banco...');
      const dbInstances = await OrphanInstanceValidator.getDbInstances(companyId);
      
      console.log('[OrphanRecovery] üìä Inst√¢ncias do banco encontradas:', dbInstances.length);

      // 6. Identificar √≥rf√£s usando algoritmo otimizado
      const orphanInstances = OrphanInstanceValidator.identifyOrphans(vpsInstances, dbInstances);

      console.log('[OrphanRecovery] üîç Inst√¢ncias √≥rf√£s identificadas:', orphanInstances.length);

      if (orphanInstances.length === 0) {
        console.log('[OrphanRecovery] ‚úÖ Sistema sincronizado - nenhuma √≥rf√£ encontrada');
        return { found: [], recovered: 0, errors: [] };
      }

      // 7. Backup de dados antes da recupera√ß√£o
      for (const orphan of orphanInstances) {
        await OrphanInstanceRecoverer.backupOrphanData(orphan);
      }

      // 8. Recuperar inst√¢ncias √≥rf√£s com tratamento robusto
      console.log('[OrphanRecovery] üîß Iniciando recupera√ß√£o de', orphanInstances.length, '√≥rf√£s...');
      const recoveryResult = await OrphanInstanceRecoverer.recoverMultipleOrphans(orphanInstances, companyId);

      // 9. Valida√ß√£o p√≥s-recupera√ß√£o
      for (const orphan of orphanInstances) {
        if (recoveryResult.recovered > 0) {
          setTimeout(async () => {
            const isValid = await OrphanInstanceRecoverer.validateRecoveredInstance(orphan.vpsInstanceId);
            if (!isValid) {
              console.warn('[OrphanRecovery] ‚ö†Ô∏è Valida√ß√£o p√≥s-recupera√ß√£o falhou para:', orphan.vpsInstanceId);
            }
          }, 5000); // Validar ap√≥s 5 segundos
        }
      }

      console.log('[OrphanRecovery] üéØ Recupera√ß√£o conclu√≠da:', {
        encontradas: orphanInstances.length,
        recuperadas: recoveryResult.recovered,
        erros: recoveryResult.errors.length,
        taxa_sucesso: `${Math.round((recoveryResult.recovered / orphanInstances.length) * 100)}%`
      });

      return {
        found: orphanInstances,
        recovered: recoveryResult.recovered,
        errors: recoveryResult.errors
      };

    } catch (error) {
      console.error('[OrphanRecovery] üí• Falha geral na recupera√ß√£o:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      
      toast.error(`Erro na busca por √≥rf√£s: ${errorMessage}`, { duration: 6000 });
      
      return {
        found: [],
        recovered: 0,
        errors: [errorMessage]
      };
    }
  }

  /**
   * Auto-recupera√ß√£o com intervalo otimizado
   */
  static startAutoRecovery(companyId: string, intervalMinutes: number = 60) {
    console.log('[OrphanRecovery] ü§ñ Iniciando auto-recupera√ß√£o OTIMIZADA a cada', intervalMinutes, 'minutos');

    const autoRecovery = async () => {
      try {
        console.log('[OrphanRecovery] üîÑ Executando auto-recupera√ß√£o programada...');
        
        const result = await this.findAndRecoverOrphanInstances(companyId);
        
        if (result.recovered > 0) {
          console.log('[OrphanRecovery] üéâ Auto-recupera√ß√£o bem-sucedida:', result.recovered, 'inst√¢ncias');
          toast.success(`ü§ñ Auto-recupera√ß√£o: ${result.recovered} inst√¢ncia(s) restaurada(s)`, { duration: 4000 });
        } else if (result.errors.length > 0) {
          console.warn('[OrphanRecovery] ‚ö†Ô∏è Auto-recupera√ß√£o com erros:', result.errors.length);
        } else {
          console.log('[OrphanRecovery] ‚úÖ Auto-recupera√ß√£o: sistema j√° sincronizado');
        }
        
      } catch (error) {
        console.error('[OrphanRecovery] ‚ùå Erro na auto-recupera√ß√£o:', error);
      }
    };

    // Primeira execu√ß√£o ap√≥s 2 minutos (dar tempo para sistema estabilizar)
    setTimeout(autoRecovery, 120000);
    
    // Execu√ß√µes peri√≥dicas
    const interval = setInterval(autoRecovery, intervalMinutes * 60 * 1000);

    return () => {
      console.log('[OrphanRecovery] üõë Parando auto-recupera√ß√£o');
      clearInterval(interval);
    };
  }

  /**
   * Estat√≠sticas do sistema de recupera√ß√£o
   */
  static getRecoveryStats(): {
    quarantineStatus: any;
    systemHealth: any;
  } {
    return {
      quarantineStatus: StabilityQuarantineManager.getQuarantineStatus(),
      systemHealth: VPSHealthMonitor.getHealthStatus()
    };
  }
}
