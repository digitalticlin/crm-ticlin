
import { supabase } from "@/integrations/supabase/client";

// CONFIGURA√á√ÉO EXATA DO SCRIPT QUE FUNCIONA
const VPS_CONFIG = {
  baseUrl: 'http://31.97.24.222:3002',
  authToken: '3oOb0an43kLEO6cy3bP8LteKCTxshH8eytEV9QR314dcf0b3',
  timeout: 30000
};

interface HybridResponse {
  success: boolean;
  instance?: any;
  error?: string;
  method: 'edge_function' | 'direct_vps';
}

export class HybridInstanceService {
  static async createInstance(instanceName: string): Promise<HybridResponse> {
    console.log('[Hybrid Service] üöÄ PLANO H√çBRIDO: Iniciando cria√ß√£o:', instanceName);

    // VALIDA√á√ÉO INICIAL
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      throw new Error('Usu√°rio n√£o autenticado');
    }

    if (!instanceName || instanceName.trim().length < 3) {
      throw new Error('Nome da inst√¢ncia deve ter pelo menos 3 caracteres');
    }

    const normalizedName = instanceName.trim().replace(/[^a-zA-Z0-9_-]/g, '_');

    // M√âTODO 1: TENTAR EDGE FUNCTION CORRIGIDA
    try {
      console.log('[Hybrid Service] üì° M√âTODO 1: Tentando Edge Function corrigida...');
      
      const { data, error } = await supabase.functions.invoke('whatsapp_instance_manager', {
        body: {
          action: 'create_instance',
          instanceName: normalizedName
        }
      });

      if (error) {
        console.error('[Hybrid Service] ‚ö†Ô∏è M√âTODO 1: Edge Function error:', error);
        throw new Error(`Edge Function error: ${error.message}`);
      }

      if (data && data.success && data.instance) {
        console.log('[Hybrid Service] ‚úÖ M√âTODO 1: Edge Function funcionou!');
        return {
          success: true,
          instance: data.instance,
          method: 'edge_function'
        };
      }

      throw new Error(data?.error || 'Edge Function retornou erro');

    } catch (edgeFunctionError) {
      console.error('[Hybrid Service] ‚ùå M√âTODO 1 FALHOU:', edgeFunctionError);
      
      // M√âTODO 2: FALLBACK DIRETO VPS (CONFIGURA√á√ÉO DO SCRIPT)
      console.log('[Hybrid Service] üîÑ M√âTODO 2: Fallback direto VPS com configura√ß√£o do script...');
      
      try {
        return await this.createInstanceDirectVPS(normalizedName, user);
      } catch (directError) {
        console.error('[Hybrid Service] ‚ùå M√âTODO 2 FALHOU:', directError);
        throw new Error(`Ambos m√©todos falharam. Edge Function: ${edgeFunctionError.message}. VPS Direto: ${directError.message}`);
      }
    }
  }

  private static async createInstanceDirectVPS(instanceName: string, user: any): Promise<HybridResponse> {
    console.log('[Hybrid Service] üéØ DIRETO VPS: Usando configura√ß√£o EXATA do script');

    // PAYLOAD EXATO DO SCRIPT
    const vpsPayload = {
      instanceId: instanceName,
      sessionName: instanceName,
      webhookUrl: 'https://kigyebrhfoljnydfipcr.supabase.co/functions/v1/webhook_whatsapp_web'
    };

    console.log('[Hybrid Service] üì¶ DIRETO VPS: Payload:', vpsPayload);

    // REQUISI√á√ÉO EXATA DO SCRIPT
    const vpsResponse = await fetch(`${VPS_CONFIG.baseUrl}/instance/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${VPS_CONFIG.authToken}`
      },
      body: JSON.stringify(vpsPayload),
      signal: AbortSignal.timeout(VPS_CONFIG.timeout)
    });

    if (!vpsResponse.ok) {
      const errorText = await vpsResponse.text();
      throw new Error(`VPS HTTP ${vpsResponse.status}: ${errorText}`);
    }

    const vpsData = await vpsResponse.json();
    console.log('[Hybrid Service] üì• DIRETO VPS: Response:', vpsData);

    if (!vpsData.success) {
      throw new Error(vpsData.error || 'VPS retornou success: false');
    }

    // SALVAR NO SUPABASE AP√ìS SUCESSO NA VPS
    console.log('[Hybrid Service] üíæ DIRETO VPS: Salvando no Supabase...');
    
    const { data: newInstance, error: dbError } = await supabase
      .from('whatsapp_instances')
      .insert({
        instance_name: instanceName,
        connection_type: 'web',
        server_url: VPS_CONFIG.baseUrl,
        vps_instance_id: vpsData.instanceId || instanceName,
        web_status: 'initializing',
        connection_status: 'vps_pending',
        created_by_user_id: user.id,
        company_id: null
      })
      .select()
      .single();

    if (dbError) {
      // VPS criou mas Supabase falhou - isso √© problem√°tico
      console.error('[Hybrid Service] ‚ö†Ô∏è DIRETO VPS: VPS OK mas Supabase falhou:', dbError);
      
      // Tentar deletar da VPS para evitar √≥rf√£s
      try {
        await fetch(`${VPS_CONFIG.baseUrl}/instance/${instanceName}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${VPS_CONFIG.authToken}`
          }
        });
        console.log('[Hybrid Service] üßπ DIRETO VPS: Limpou inst√¢ncia √≥rf√£ da VPS');
      } catch (cleanupError) {
        console.error('[Hybrid Service] ‚ö†Ô∏è DIRETO VPS: N√£o conseguiu limpar VPS:', cleanupError);
      }
      
      throw new Error(`VPS criou inst√¢ncia mas erro no Supabase: ${dbError.message}`);
    }

    console.log('[Hybrid Service] ‚úÖ DIRETO VPS: Inst√¢ncia criada e salva com sucesso!');

    return {
      success: true,
      instance: newInstance,
      method: 'direct_vps'
    };
  }

  static async deleteInstance(instanceId: string): Promise<{ success: boolean; error?: string }> {
    try {
      const { data, error } = await supabase.functions.invoke('whatsapp_instance_manager', {
        body: {
          action: 'delete_instance_corrected',
          instanceId: instanceId
        }
      });

      if (error) {
        throw new Error(error.message || 'Erro ao deletar inst√¢ncia');
      }

      return { success: true };
    } catch (error: any) {
      console.error('[Hybrid Service] ‚ùå Erro ao deletar:', error);
      return {
        success: false,
        error: error.message || 'Erro ao deletar inst√¢ncia'
      };
    }
  }
}
