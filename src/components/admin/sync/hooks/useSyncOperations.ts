import { useState } from "react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { SyncResult } from "../types";

export const useSyncOperations = (addLog: (message: string) => void) => {
  const [isRunning, setIsRunning] = useState(false);
  const [isStatusSync, setIsStatusSync] = useState(false);
  const [isOrphanSync, setIsOrphanSync] = useState(false);
  const [result, setResult] = useState<SyncResult | null>(null);

  const executeGlobalSync = async () => {
    setIsRunning(true);
    setResult(null);
    
    addLog("üöÄ Iniciando sincroniza√ß√£o GLOBAL COMPLETA VPS ‚Üî Supabase...");
    addLog("üì° Esta opera√ß√£o sincroniza TODAS as inst√¢ncias (incluindo √≥rf√£s)...");

    try {
      addLog("üîê Verificando autentica√ß√£o...");
      
      // **CORRE√á√ÉO**: Chamar a nova a√ß√£o sync_all_instances
      const { data, error } = await supabase.functions.invoke('whatsapp_web_server', {
        body: {
          action: 'sync_all_instances' // **NOVA A√á√ÉO**: Sincroniza√ß√£o global completa
        }
      });

      addLog("üì• Resposta recebida do servidor global");

      if (error) {
        addLog(`‚ùå Erro na requisi√ß√£o: ${error.message}`);
        throw error;
      }

      if (data && data.success) {
        const summary = data.summary || {};
        const results = data.results || {};
        
        addLog(`‚úÖ Sincroniza√ß√£o GLOBAL conclu√≠da com sucesso!`);
        addLog(`üìä VPS: ${summary.vps_instances || 0} inst√¢ncias encontradas`);
        addLog(`üìä Supabase: ${summary.supabase_instances || 0} inst√¢ncias existentes`);
        addLog(`üÜï √ìrf√£s importadas: ${results.added || 0} (created_by_user_id: NULL)`);
        addLog(`üîÑ Status atualizados: ${results.updated || 0}`);
        addLog(`üîó V√≠nculos preservados: ${results.preserved_links || 0}`);
        addLog(`‚ö∞Ô∏è Inst√¢ncias mortas marcadas: ${results.marked_dead || 0}`);
        
        if (results.errors && results.errors.length > 0) {
          addLog(`‚ö†Ô∏è Erros encontrados: ${results.errors.length}`);
          results.errors.forEach((error: any, index: number) => {
            addLog(`  ${index + 1}. ${error.vpsId || 'unknown'}: ${error.error}`);
          });
        }

        addLog(`‚è±Ô∏è Tempo de execu√ß√£o: ${data.execution_time_ms || 0}ms`);
        
        setResult({
          success: true,
          data: {
            syncId: data.syncId || 'global-sync',
            syncedCount: (results.added || 0) + (results.updated || 0),
            createdCount: results.added || 0,
            updatedCount: results.updated || 0,
            errorCount: results.errors?.length || 0,
            vpsInstancesCount: summary.vps_instances || 0,
            supabaseInstancesCount: summary.supabase_instances || 0,
            syncLog: [`√ìrf√£s: ${results.added}`, `Atualizadas: ${results.updated}`, `Preservadas: ${results.preserved_links}`],
            message: `Sincroniza√ß√£o global completa! ${results.added || 0} √≥rf√£s importadas, ${results.updated || 0} atualizadas`
          }
        });

        const successMessage = results.added > 0 
          ? `Sincroniza√ß√£o GLOBAL conclu√≠da! ${results.added} √≥rf√£s importadas, ${results.updated} atualizadas`
          : `Sincroniza√ß√£o GLOBAL conclu√≠da! ${results.updated || 0} inst√¢ncias atualizadas`;
        
        toast.success(successMessage);
      } else {
        const errorMessage = data?.error || 'Erro desconhecido na sincroniza√ß√£o global';
        addLog(`‚ùå Falha na sincroniza√ß√£o global: ${errorMessage}`);
        
        setResult({
          success: false,
          error: errorMessage
        });
        
        toast.error(`Falha na sincroniza√ß√£o global: ${errorMessage}`);
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Erro inesperado';
      addLog(`üí• Erro inesperado na sincroniza√ß√£o global: ${errorMessage}`);
      
      setResult({
        success: false,
        error: errorMessage
      });
      
      toast.error(`Erro na sincroniza√ß√£o global: ${errorMessage}`);
    } finally {
      setIsRunning(false);
      addLog("üèÅ Processo de sincroniza√ß√£o GLOBAL finalizado");
    }
  };

  const executeStatusSync = async () => {
    setIsStatusSync(true);
    setResult(null);
    
    addLog("üîß Iniciando sincroniza√ß√£o de status e configura√ß√£o de webhooks...");
    addLog("‚öôÔ∏è Configurando webhooks na VPS e atualizando status...");

    try {
      const { data, error } = await supabase.functions.invoke('whatsapp_web_server', {
        body: {
          action: 'sync_status_webhooks'
        }
      });

      if (error) {
        addLog(`‚ùå Erro na requisi√ß√£o: ${error.message}`);
        throw error;
      }

      if (data && data.success) {
        const summary = data.data || {};
        
        addLog(`‚úÖ Sincroniza√ß√£o de status conclu√≠da!`);
        addLog(`üîó Webhooks configurados: ${summary.webhooksConfigured || 0}`);
        addLog(`üîÑ Status atualizados: ${summary.statusUpdated || 0}`);
        addLog(`üìä Inst√¢ncias processadas: ${summary.processedCount || 0}`);
        
        setResult({
          success: true,
          data: {
            syncId: summary.syncId || 'status-sync',
            syncedCount: summary.statusUpdated || 0,
            createdCount: 0,
            updatedCount: summary.statusUpdated || 0,
            errorCount: summary.errorCount || 0,
            vpsInstancesCount: summary.processedCount || 0,
            supabaseInstancesCount: summary.statusUpdated || 0,
            syncLog: summary.syncLog || [],
            message: 'Webhooks configurados e status sincronizados com sucesso'
          }
        });

        toast.success(`Status sincronizado! ${summary.statusUpdated || 0} inst√¢ncias atualizadas`);
      } else {
        const errorMessage = data?.error || 'Erro desconhecido na sincroniza√ß√£o de status';
        addLog(`‚ùå Falha na sincroniza√ß√£o: ${errorMessage}`);
        
        setResult({
          success: false,
          error: errorMessage
        });
        
        toast.error(`Falha na sincroniza√ß√£o: ${errorMessage}`);
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Erro inesperado';
      addLog(`üí• Erro inesperado: ${errorMessage}`);
      
      setResult({
        success: false,
        error: errorMessage
      });
      
      toast.error(`Erro na sincroniza√ß√£o: ${errorMessage}`);
    } finally {
      setIsStatusSync(false);
      addLog("üèÅ Sincroniza√ß√£o de status finalizada");
    }
  };

  const executeOrphanSync = async () => {
    setIsOrphanSync(true);
    setResult(null);
    
    addLog("üë• Iniciando sincroniza√ß√£o de inst√¢ncias √≥rf√£s...");
    addLog("üîç Buscando inst√¢ncias n√£o vinculadas na VPS...");

    try {
      const { data, error } = await supabase.functions.invoke('whatsapp_web_server', {
        body: {
          action: 'sync_orphan_instances'
        }
      });

      if (error) {
        addLog(`‚ùå Erro na requisi√ß√£o: ${error.message}`);
        throw error;
      }

      if (data && data.success) {
        const summary = data.data || {};
        
        addLog(`‚úÖ Sincroniza√ß√£o de √≥rf√£s conclu√≠da!`);
        addLog(`üÜï √ìrf√£s importadas: ${summary.orphansImported || 0}`);
        addLog(`üîÑ √ìrf√£s atualizadas: ${summary.orphansUpdated || 0}`);
        addLog(`üìä Total processadas: ${summary.totalProcessed || 0}`);
        
        setResult({
          success: true,
          data: {
            syncId: summary.syncId || 'orphan-sync',
            syncedCount: summary.orphansImported || 0,
            createdCount: summary.orphansImported || 0,
            updatedCount: summary.orphansUpdated || 0,
            errorCount: summary.errorCount || 0,
            vpsInstancesCount: summary.totalProcessed || 0,
            supabaseInstancesCount: summary.orphansImported || 0,
            syncLog: summary.syncLog || [],
            message: 'Inst√¢ncias √≥rf√£s importadas com sucesso'
          }
        });

        toast.success(`√ìrf√£s sincronizadas! ${summary.orphansImported || 0} inst√¢ncias importadas`);
      } else {
        const errorMessage = data?.error || 'Erro desconhecido na sincroniza√ß√£o de √≥rf√£s';
        addLog(`‚ùå Falha na sincroniza√ß√£o: ${errorMessage}`);
        
        setResult({
          success: false,
          error: errorMessage
        });
        
        toast.error(`Falha na sincroniza√ß√£o: ${errorMessage}`);
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Erro inesperado';
      addLog(`üí• Erro inesperado: ${errorMessage}`);
      
      setResult({
        success: false,
        error: errorMessage
      });
      
      toast.error(`Erro na sincroniza√ß√£o: ${errorMessage}`);
    } finally {
      setIsOrphanSync(false);
      addLog("üèÅ Sincroniza√ß√£o de √≥rf√£s finalizada");
    }
  };

  return {
    isRunning,
    isStatusSync,
    isOrphanSync,
    result,
    executeGlobalSync,
    executeStatusSync,
    executeOrphanSync
  };
};
