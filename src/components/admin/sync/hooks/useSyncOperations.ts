
import { useState } from "react";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { SyncResult } from "../types";

export const useSyncOperations = (addLog: (message: string) => void) => {
  const [isRunning, setIsRunning] = useState(false);
  const [result, setResult] = useState<SyncResult | null>(null);

  const executeGlobalSync = async () => {
    setIsRunning(true);
    setResult(null);
    
    addLog("üöÄ Iniciando sincroniza√ß√£o GLOBAL COMPLETA VPS ‚Üî Supabase...");
    addLog("üì° Esta opera√ß√£o sincroniza TODAS as inst√¢ncias da VPS para o Supabase...");
    addLog("üîí GARANTIA: Nenhuma inst√¢ncia ser√° deletada, apenas adicionada/atualizada");

    try {
      addLog("üîê Verificando autentica√ß√£o...");
      
      const { data, error } = await supabase.functions.invoke('whatsapp_web_server', {
        body: {
          action: 'sync_all_instances'
        }
      });

      addLog("üì• Resposta recebida do servidor de sincroniza√ß√£o");

      if (error) {
        addLog(`‚ùå Erro na requisi√ß√£o: ${error.message}`);
        throw error;
      }

      if (data && data.success) {
        const summary = data.summary || {};
        const results = data.results || {};
        
        addLog(`‚úÖ Sincroniza√ß√£o GLOBAL conclu√≠da com sucesso!`);
        addLog(`üìä VPS: ${summary.vps_instances || 0} inst√¢ncias encontradas`);
        addLog(`üìä Supabase antes: ${summary.supabase_instances || 0} inst√¢ncias`);
        addLog(`üÜï Inst√¢ncias adicionadas: ${results.added || 0}`);
        addLog(`üîÑ Inst√¢ncias atualizadas: ${results.updated || 0}`);
        addLog(`üîó V√≠nculos preservados: ${results.preserved_links || 0}`);
        
        if (results.errors && results.errors.length > 0) {
          addLog(`‚ö†Ô∏è Erros encontrados: ${results.errors.length}`);
          results.errors.forEach((error: any, index: number) => {
            addLog(`  ${index + 1}. ${error.vpsId || 'unknown'}: ${error.error}`);
          });
        } else {
          addLog(`‚úÖ Nenhum erro encontrado - sincroniza√ß√£o perfeita!`);
        }

        addLog(`‚è±Ô∏è Tempo de execu√ß√£o: ${data.execution_time_ms || 0}ms`);
        addLog(`üéØ RESULTADO: Supabase agora √© um espelho perfeito da VPS`);
        
        setResult({
          success: true,
          data: {
            syncId: data.syncId || 'global-sync',
            syncedCount: (results.added || 0) + (results.updated || 0),
            createdCount: results.added || 0,
            updatedCount: results.updated || 0,
            errorCount: results.errors?.length || 0,
            vpsInstancesCount: summary.vps_instances || 0,
            supabaseInstancesCount: summary.supabase_instances || 0,
            syncLog: [
              `Adicionadas: ${results.added}`, 
              `Atualizadas: ${results.updated}`, 
              `Preservadas: ${results.preserved_links}`,
              `Total VPS: ${summary.vps_instances}`
            ],
            message: `Sincroniza√ß√£o global completa! ${results.added || 0} novas inst√¢ncias, ${results.updated || 0} atualizadas`
          }
        });

        const successMessage = results.added > 0 
          ? `Sincroniza√ß√£o GLOBAL conclu√≠da! ${results.added} novas inst√¢ncias, ${results.updated} atualizadas`
          : `Sincroniza√ß√£o GLOBAL conclu√≠da! ${results.updated || 0} inst√¢ncias atualizadas`;
        
        toast.success(successMessage);
      } else {
        const errorMessage = data?.error || 'Erro desconhecido na sincroniza√ß√£o global';
        addLog(`‚ùå Falha na sincroniza√ß√£o global: ${errorMessage}`);
        
        setResult({
          success: false,
          error: errorMessage
        });
        
        toast.error(`Falha na sincroniza√ß√£o global: ${errorMessage}`);
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Erro inesperado';
      addLog(`üí• Erro inesperado na sincroniza√ß√£o global: ${errorMessage}`);
      
      setResult({
        success: false,
        error: errorMessage
      });
      
      toast.error(`Erro na sincroniza√ß√£o global: ${errorMessage}`);
    } finally {
      setIsRunning(false);
      addLog("üèÅ Processo de sincroniza√ß√£o GLOBAL finalizado");
    }
  };

  return {
    isRunning,
    isStatusSync: false, // Removidas as opera√ß√µes que n√£o funcionam
    isOrphanSync: false, // Removidas as opera√ß√µes que n√£o funcionam
    result,
    executeGlobalSync,
    executeStatusSync: () => {
      toast.info("Use a sincroniza√ß√£o global que j√° inclui atualiza√ß√£o de status");
    },
    executeOrphanSync: () => {
      toast.info("Use a sincroniza√ß√£o global que j√° inclui importa√ß√£o de √≥rf√£s");
    }
  };
};
