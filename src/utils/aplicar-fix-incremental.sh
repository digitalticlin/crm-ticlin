
#!/bin/bash

# APLICAR CORRE√á√ÉO INCREMENTAL COM ROLLBACK AUTOM√ÅTICO
echo "üîß APLICANDO CORRE√á√ÉO INCREMENTAL"
echo "================================="

echo "üìÖ Data: $(date)"
echo "üéØ Objetivo: Corrigir apenas o endpoint GET QR sem quebrar funcionalidade b√°sica"
echo ""

# CONFIGURA√á√ïES
VPS_IP="31.97.24.222"
PORTA="3002"

echo "üõ°Ô∏è FASE 1: BACKUP DE SEGURAN√áA"
echo "=============================="

echo "üìã Criando backup do arquivo atual..."
if [ -f "vps-server-persistent.js" ]; then
    cp vps-server-persistent.js "vps-server-backup-incremental-$(date +%Y%m%d_%H%M%S).js"
    echo "‚úÖ Backup criado"
else
    echo "‚ö†Ô∏è Arquivo atual n√£o encontrado"
fi

echo ""
echo "üìÅ FASE 2: APLICAR CORRE√á√ÉO INCREMENTAL"
echo "======================================"

echo "üìã Copiando arquivo corrigido..."
if [ -f "vps-server-fixed-final.js" ]; then
    cp vps-server-fixed-final.js vps-server-persistent.js
    echo "‚úÖ Arquivo corrigido aplicado"
else
    echo "‚ùå Arquivo de corre√ß√£o n√£o encontrado!"
    echo "Voc√™ precisa ter o arquivo vps-server-fixed-final.js"
    exit 1
fi

echo ""
echo "üîÑ FASE 3: REINICIAR SERVIDOR"
echo "============================"

echo "üìã Reiniciando PM2..."
pm2 restart whatsapp-main-3002

echo "‚è≥ Aguardando 10s para inicializa√ß√£o..."
sleep 10

echo ""
echo "üß™ FASE 4: TESTE IMEDIATO DOS ENDPOINTS B√ÅSICOS"
echo "=============================================="

# Fun√ß√£o para teste r√°pido
function quick_test() {
    local name="$1"
    local url="$2"
    
    echo -n "üß™ $name... "
    
    response=$(timeout 5s curl -s -w "%{http_code}" "$url" 2>/dev/null)
    
    if [[ $? -eq 0 ]]; then
        http_code="${response: -3}"
        if [[ "$http_code" == "200" ]]; then
            echo "‚úÖ OK"
            return 0
        else
            echo "‚ùå FAIL ($http_code)"
            return 1
        fi
    else
        echo "‚ùå TIMEOUT"
        return 1
    fi
}

# Testes cr√≠ticos (sem auth para simplificar)
quick_test "Health" "http://$VPS_IP:$PORTA/health"
health_ok=$?

quick_test "Status" "http://$VPS_IP:$PORTA/status"
status_ok=$?

echo ""
echo "üìä RESULTADO IMEDIATO:"
echo "===================="

if [[ $health_ok -eq 0 && $status_ok -eq 0 ]]; then
    echo "‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!"
    echo "‚úÖ Health: OK"
    echo "‚úÖ Status: OK"
    echo ""
    echo "üß™ Executando teste completo..."
    if [ -f "teste-endpoints-basicos.sh" ]; then
        chmod +x teste-endpoints-basicos.sh
        ./teste-endpoints-basicos.sh
    else
        echo "‚ö†Ô∏è Arquivo de teste n√£o encontrado"
    fi
    
else
    echo "‚ùå FALHA NA CORRE√á√ÉO!"
    echo "Health: $([ $health_ok -eq 0 ] && echo 'OK' || echo 'FAIL')"
    echo "Status: $([ $status_ok -eq 0 ] && echo 'OK' || echo 'FAIL')"
    echo ""
    echo "üîÑ INICIANDO ROLLBACK AUTOM√ÅTICO..."
    
    # Encontrar backup mais recente
    latest_backup=$(ls -t vps-server-backup-incremental-*.js 2>/dev/null | head -1)
    
    if [ -n "$latest_backup" ]; then
        echo "üìã Restaurando backup: $latest_backup"
        cp "$latest_backup" vps-server-persistent.js
        pm2 restart whatsapp-main-3002
        sleep 5
        echo "‚úÖ Rollback realizado"
        
        # Testar se rollback funcionou
        quick_test "Health p√≥s-rollback" "http://$VPS_IP:$PORTA/health"
        if [ $? -eq 0 ]; then
            echo "‚úÖ Sistema restaurado ao estado anterior"
        else
            echo "‚ùå Rollback tamb√©m falhou - verificar manualmente"
        fi
    else
        echo "‚ö†Ô∏è Nenhum backup encontrado para rollback"
    fi
    
    exit 1
fi

echo ""
echo "‚úÖ CORRE√á√ÉO INCREMENTAL COMPLETA!"
echo "================================"
echo "Funcionalidade b√°sica preservada + GET QR endpoint adicionado"
