
#!/bin/bash

# INSTALA√á√ÉO LIMPA VPS - AMBIENTE OTIMIZADO
echo "üöÄ INSTALA√á√ÉO LIMPA VPS - AMBIENTE OTIMIZADO"
echo "==========================================="
echo "üìÖ Data: $(date)"
echo "üéØ Objetivo: Instalar ambiente limpo e funcional"
echo ""

# Fun√ß√£o de log
log_install() {
    echo "[$(date '+%H:%M:%S')] üöÄ $1"
}

log_success() {
    echo "[$(date '+%H:%M:%S')] ‚úÖ $1"
}

log_error() {
    echo "[$(date '+%H:%M:%S')] ‚ùå $1"
}

log_test() {
    echo "[$(date '+%H:%M:%S')] üß™ $1"
}

# FASE 1: ATUALIZA√á√ÉO DO SISTEMA
echo ""
echo "üîÑ FASE 1: ATUALIZA√á√ÉO DO SISTEMA"
echo "==============================="

log_install "Atualizando sistema operacional..."
apt-get update -y
apt-get upgrade -y

log_install "Instalando depend√™ncias b√°sicas..."
apt-get install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates build-essential

log_success "Sistema atualizado"

# FASE 2: INSTALA√á√ÉO NODE.JS LTS
echo ""
echo "üü¢ FASE 2: INSTALA√á√ÉO NODE.JS LTS"
echo "==============================="

log_install "Instalando Node.js LTS (vers√£o 18)..."

# Instalar NodeSource repository
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -

# Instalar Node.js
apt-get install -y nodejs

# Verificar instala√ß√£o
if command -v node &> /dev/null; then
    node_version=$(node --version)
    npm_version=$(npm --version)
    log_success "Node.js instalado: $node_version"
    log_success "NPM instalado: v$npm_version"
else
    log_error "Falha na instala√ß√£o do Node.js"
    exit 1
fi

# Configurar npm para root
npm config set unsafe-perm true

log_success "Node.js configurado"

# FASE 3: INSTALA√á√ÉO GOOGLE CHROME
echo ""
echo "üåê FASE 3: INSTALA√á√ÉO GOOGLE CHROME"
echo "=================================="

log_install "Instalando Google Chrome Stable..."

# Adicionar chave e reposit√≥rio
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list

# Atualizar e instalar
apt-get update -y
apt-get install -y google-chrome-stable

# Instalar depend√™ncias adicionais
apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2

# Verificar instala√ß√£o
if command -v google-chrome-stable &> /dev/null; then
    chrome_version=$(google-chrome-stable --version)
    log_success "Chrome instalado: $chrome_version"
    CHROME_PATH="/usr/bin/google-chrome-stable"
else
    log_error "Falha na instala√ß√£o do Chrome"
    exit 1
fi

log_success "Chrome configurado"

# FASE 4: TESTE CHROME HEADLESS
echo ""
echo "üß™ FASE 4: TESTE CHROME HEADLESS"
echo "==============================="

log_test "Testando Chrome headless..."

# Teste b√°sico
if timeout 10s $CHROME_PATH --headless --no-sandbox --disable-gpu --dump-dom "data:text/html,<h1>Test</h1>" >/dev/null 2>&1; then
    log_success "Chrome headless funciona corretamente"
else
    log_error "Chrome headless falhou"
    exit 1
fi

log_success "Chrome validado"

# FASE 5: INSTALA√á√ÉO PM2
echo ""
echo "‚öôÔ∏è FASE 5: INSTALA√á√ÉO PM2"
echo "======================="

log_install "Instalando PM2 globalmente..."

npm install -g pm2

# Verificar instala√ß√£o
if command -v pm2 &> /dev/null; then
    pm2_version=$(pm2 --version)
    log_success "PM2 instalado: v$pm2_version"
    
    # Configurar PM2
    pm2 startup
    pm2 save
else
    log_error "Falha na instala√ß√£o do PM2"
    exit 1
fi

log_success "PM2 configurado"

# FASE 6: CRIA√á√ÉO DO AMBIENTE WHATSAPP
echo ""
echo "üì¶ FASE 6: CRIA√á√ÉO DO AMBIENTE WHATSAPP"
echo "======================================"

log_install "Criando ambiente WhatsApp original..."

# Criar diret√≥rio principal
mkdir -p /root/whatsapp-original
cd /root/whatsapp-original

# Inicializar projeto
npm init -y

# Instalar depend√™ncias espec√≠ficas
log_install "Instalando depend√™ncias WhatsApp..."
npm install whatsapp-web.js@1.30.0
npm install express@4.19.2 cors@2.8.5 qrcode@1.5.4

# Verificar instala√ß√µes
if [ -d "node_modules/whatsapp-web.js" ]; then
    log_success "whatsapp-web.js instalado"
else
    log_error "whatsapp-web.js n√£o foi instalado"
    exit 1
fi

# Criar diret√≥rios necess√°rios
mkdir -p sessions
mkdir -p backups
mkdir -p logs

log_success "Ambiente WhatsApp criado"

# FASE 7: CONFIGURA√á√ÉO DE VARI√ÅVEIS
echo ""
echo "üåç FASE 7: CONFIGURA√á√ÉO DE VARI√ÅVEIS"
echo "=================================="

log_install "Configurando vari√°veis de ambiente..."

# Configurar vari√°veis
export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH="$CHROME_PATH"
export NODE_ENV=production

# Adicionar ao bashrc
echo "" >> ~/.bashrc
echo "# WhatsApp Original Environment" >> ~/.bashrc
echo "export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true" >> ~/.bashrc
echo "export PUPPETEER_EXECUTABLE_PATH=\"$CHROME_PATH\"" >> ~/.bashrc
echo "export NODE_ENV=production" >> ~/.bashrc

log_success "Vari√°veis configuradas"

# FASE 8: TESTE DE INTEGRA√á√ÉO
echo ""
echo "üß™ FASE 8: TESTE DE INTEGRA√á√ÉO"
echo "============================"

log_test "Testando integra√ß√£o Puppeteer + Chrome..."

# Criar teste de integra√ß√£o
cat > test-integration.js << 'EOF'
const puppeteer = require('puppeteer');

(async () => {
  try {
    console.log('üß™ Testando Puppeteer com Chrome...');
    
    const browser = await puppeteer.launch({
      headless: true,
      executablePath: process.env.PUPPETEER_EXECUTABLE_PATH,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],
      timeout: 10000
    });
    
    const page = await browser.newPage();
    await page.goto('data:text/html,<h1>Teste OK</h1>');
    const title = await page.title();
    
    await browser.close();
    console.log('‚úÖ INTEGRA√á√ÉO FUNCIONANDO!');
    
  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
    process.exit(1);
  }
})();
EOF

# Executar teste
if node test-integration.js; then
    log_success "INTEGRA√á√ÉO FUNCIONANDO!"
else
    log_error "Falha na integra√ß√£o"
    exit 1
fi

# Limpeza
rm test-integration.js

log_success "Integra√ß√£o validada"

# RESUMO DA INSTALA√á√ÉO
echo ""
echo "üéâ INSTALA√á√ÉO LIMPA CONCLU√çDA!"
echo "============================="

echo "‚úÖ AMBIENTE LIMPO INSTALADO:"
echo "   ‚úÖ Sistema: Atualizado"
echo "   ‚úÖ Node.js: $node_version"
echo "   ‚úÖ NPM: v$npm_version"
echo "   ‚úÖ Chrome: $chrome_version"
echo "   ‚úÖ PM2: v$pm2_version"
echo "   ‚úÖ WhatsApp-web.js: v1.30.0"
echo "   ‚úÖ Integra√ß√£o: TESTADA E FUNCIONANDO"

echo ""
echo "üîß CONFIGURA√á√ÉO:"
echo "   üìÅ Diret√≥rio: /root/whatsapp-original"
echo "   üåê Chrome: $CHROME_PATH"
echo "   üì¶ Depend√™ncias: Instaladas e testadas"

echo ""
echo "üöÄ PR√ìXIMO PASSO:"
echo "   Execute: bash vps-original-server.sh"
echo "   (Implementar servidor WhatsApp original)"

log_success "INSTALA√á√ÉO LIMPA FINALIZADA COM SUCESSO!"
