
import { useState, useEffect } from "react";
import { toast } from "sonner";
import { useWhatsAppWebInstances } from "./useWhatsAppWebInstances";
import { useAutomaticQRPolling } from "./useAutomaticQRPolling";
import { useAuth } from "@/contexts/AuthContext";

export const useWhatsAppWebSectionLogic = () => {
  const [userEmail, setUserEmail] = useState<string>("");
  const [localShowQRModal, setLocalShowQRModal] = useState(false);
  const [localSelectedQRCode, setLocalSelectedQRCode] = useState<string | null>(null);
  const [localSelectedInstanceName, setLocalSelectedInstanceName] = useState<string>('');
  const [isWaitingForQR, setIsWaitingForQR] = useState(false);
  const [isCreatingInstance, setIsCreatingInstance] = useState(false);
  const [creationStage, setCreationStage] = useState<string>('');

  const { user } = useAuth();

  const {
    instances,
    isLoading,
    isConnecting,
    createInstance,
    deleteInstance,
    refreshQRCode,
    generateIntelligentInstanceName
  } = useWhatsAppWebInstances();

  const { isPolling, currentAttempt, maxAttempts, startPolling, stopPolling } = useAutomaticQRPolling();

  // CORRE√á√ÉO CR√çTICA: Usar dados do usu√°rio autenticado
  useEffect(() => {
    if (user) {
      setUserEmail(user.email || "");
      console.log('[WhatsAppWebSection] üë§ CORRE√á√ÉO CR√çTICA - Usu√°rio carregado:', user.email);
    }
  }, [user]);

  // Cleanup polling ao desmontar
  useEffect(() => {
    return () => {
      stopPolling();
    };
  }, [stopPolling]);

  // CORRE√á√ÉO CR√çTICA: Fluxo SINCRONIZADO - VPS-Frontend
  const handleConnect = async () => {
    console.log('[WhatsAppWebSection] üöÄ CORRE√á√ÉO CR√çTICA - Connect requested - Sequ√™ncia Sincronizada');
    
    try {
      // ETAPA 1: Preparar cria√ß√£o (sem mostrar nada ainda)
      setIsCreatingInstance(true);
      setCreationStage('Preparando nova inst√¢ncia...');
      
      // ETAPA 2: Gerar nome da inst√¢ncia
      const instanceName = await generateIntelligentInstanceName(userEmail);
      console.log('[WhatsAppWebSection] üéØ CORRE√á√ÉO CR√çTICA - Nome gerado:', instanceName);
      
      setCreationStage('Criando inst√¢ncia na VPS...');
      toast.loading(`Criando inst√¢ncia "${instanceName}"...`, { id: 'creating-instance' });
      
      // ETAPA 3: AGUARDAR confirma√ß√£o COMPLETA da VPS
      console.log('[WhatsAppWebSection] üì± CORRE√á√ÉO CR√çTICA - Criando e AGUARDANDO confirma√ß√£o VPS...');
      const createdInstance = await createInstance(instanceName);
      
      if (!createdInstance) {
        throw new Error('Falha ao criar inst√¢ncia na VPS');
      }
      
      console.log('[WhatsAppWebSection] ‚úÖ CORRE√á√ÉO CR√çTICA - VPS confirmou cria√ß√£o:', {
        id: createdInstance.id,
        name: createdInstance.instance_name,
        hasQrCode: !!createdInstance.qr_code,
        vpsInstanceId: createdInstance.vps_instance_id
      });
      
      // ETAPA 4: Aguardar 2 segundos para garantir sincroniza√ß√£o VPS-DB
      setCreationStage('Sincronizando com banco de dados...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // ETAPA 5: Configurar modal APENAS ap√≥s confirma√ß√£o completa
      setLocalSelectedInstanceName(createdInstance.instance_name);
      
      if (createdInstance.qr_code) {
        // QR Code dispon√≠vel - VPS processou completamente
        console.log('[WhatsAppWebSection] ‚úÖ CORRE√á√ÉO CR√çTICA - QR Code confirmado pela VPS!');
        setLocalSelectedQRCode(createdInstance.qr_code);
        setIsWaitingForQR(false);
        setCreationStage('QR Code pronto!');
        toast.success(`QR Code pronto! Escaneie para conectar.`, { id: 'creating-instance' });
      } else {
        // QR Code n√£o dispon√≠vel - iniciar polling INTELIGENTE
        console.log('[WhatsAppWebSection] ‚è≥ CORRE√á√ÉO CR√çTICA - QR n√£o dispon√≠vel, iniciando polling sincronizado...');
        setIsWaitingForQR(true);
        setCreationStage('Preparando QR Code...');
        toast.info(`Preparando QR Code para "${instanceName}"...`, { id: 'creating-instance' });
        
        // Polling com confirma√ß√£o de inst√¢ncia existente
        await startPolling(
          createdInstance.id,
          createdInstance.instance_name,
          (qrCode: string) => {
            console.log('[WhatsAppWebSection] üéâ CORRE√á√ÉO CR√çTICA - QR Code obtido via polling sincronizado!');
            setLocalSelectedQRCode(qrCode);
            setIsWaitingForQR(false);
            setCreationStage('QR Code pronto!');
            toast.success('QR Code pronto! Escaneie para conectar.', { id: 'creating-instance' });
          }
        );
      }
      
      // ETAPA 6: AGORA SIM abrir modal ap√≥s tudo estar pronto
      setLocalShowQRModal(true);
      
    } catch (error: any) {
      console.error('[WhatsAppWebSection] ‚ùå CORRE√á√ÉO CR√çTICA - Erro na sequ√™ncia sincronizada:', error);
      setIsWaitingForQR(false);
      setLocalShowQRModal(false);
      setCreationStage('');
      stopPolling();
      toast.error(`Erro ao criar inst√¢ncia: ${error.message}`, { id: 'creating-instance' });
    } finally {
      setIsCreatingInstance(false);
      setCreationStage('');
    }
  };

  const handleDeleteInstance = async (instanceId: string) => {
    console.log('[WhatsAppWebSection] üóëÔ∏è CORRE√á√ÉO CR√çTICA - Deleting instance:', instanceId);
    await deleteInstance(instanceId);
  };

  const handleRefreshQR = async (instanceId: string) => {
    console.log('[WhatsAppWebSection] üîÑ CORRE√á√ÉO CR√çTICA - Refreshing QR code for instance:', instanceId);
    
    try {
      setIsWaitingForQR(true);
      const result = await refreshQRCode(instanceId);
      
      if (result && result.success && result.qrCode) {
        const instance = instances.find(i => i.id === instanceId);
        setLocalSelectedQRCode(result.qrCode);
        setLocalSelectedInstanceName(instance?.instance_name || '');
        setLocalShowQRModal(true);
        setIsWaitingForQR(false);
      } else {
        setIsWaitingForQR(false);
        throw new Error('QR Code n√£o dispon√≠vel');
      }
    } catch (error: any) {
      setIsWaitingForQR(false);
      toast.error(`Erro ao atualizar QR Code: ${error.message}`);
    }
  };

  const handleShowQR = (instance: any) => {
    if (instance.qr_code) {
      setLocalSelectedQRCode(instance.qr_code);
      setLocalSelectedInstanceName(instance.instance_name);
      setLocalShowQRModal(true);
      setIsWaitingForQR(false);
    } else {
      toast.error('QR Code n√£o dispon√≠vel para esta inst√¢ncia');
    }
  };

  const closeQRModal = () => {
    console.log('[WhatsAppWebSection] üîê CORRE√á√ÉO CR√çTICA - Fechando modal');
    setLocalShowQRModal(false);
    setLocalSelectedQRCode(null);
    setLocalSelectedInstanceName('');
    setIsWaitingForQR(false);
    stopPolling();
  };

  const isConnectingOrPolling = isConnecting || isPolling || isCreatingInstance;

  return {
    instances,
    isLoading,
    isCreatingInstance,
    creationStage,
    isConnectingOrPolling,
    localShowQRModal,
    localSelectedQRCode,
    localSelectedInstanceName,
    isWaitingForQR,
    currentAttempt,
    maxAttempts,
    handleConnect,
    handleDeleteInstance,
    handleRefreshQR,
    handleShowQR,
    closeQRModal
  };
};
