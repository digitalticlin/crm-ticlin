
import { useCallback } from 'react';
import { toast } from 'sonner';
import { WhatsAppWebService } from '@/services/whatsapp/whatsappWebService';

export const useInstanceActions = (fetchInstances: () => Promise<void>) => {
  // CORRE√á√ÉO CR√çTICA: Create instance com confirma√ß√£o COMPLETA da VPS
  const createInstance = useCallback(async (instanceName: string) => {
    try {
      console.log('[Hook] üÜï CORRE√á√ÉO CR√çTICA - Criando inst√¢ncia com confirma√ß√£o VPS:', instanceName);
      
      const result = await WhatsAppWebService.createInstance(instanceName);
      
      if (result.success && result.instance) {
        console.log('[Hook] ‚úÖ CORRE√á√ÉO CR√çTICA - Inst√¢ncia criada e confirmada pela VPS:', {
          id: result.instance.id,
          name: result.instance.instance_name,
          hasQR: !!result.instance.qr_code,
          vpsInstanceId: result.instance.vps_instance_id
        });
        
        // CORRE√á√ÉO CR√çTICA: S√≥ mostrar sucesso ap√≥s confirma√ß√£o VPS
        toast.success(`Inst√¢ncia "${instanceName}" criada na VPS!`);
        
        // CORRE√á√ÉO CR√çTICA: Aguardar sincroniza√ß√£o com banco antes de atualizar lista
        await new Promise(resolve => setTimeout(resolve, 1500));
        await fetchInstances();
        
        // CORRE√á√ÉO CR√çTICA: Retornar inst√¢ncia APENAS quando VPS confirmou
        return result.instance;
      } else {
        throw new Error(result.error || 'VPS n√£o confirmou cria√ß√£o da inst√¢ncia');
      }
    } catch (error: any) {
      console.error('[Hook] ‚ùå CORRE√á√ÉO CR√çTICA - Erro na cria√ß√£o/confirma√ß√£o VPS:', error);
      toast.error(`Erro ao criar inst√¢ncia na VPS: ${error.message}`);
      throw error; // Re-throw para tratamento no componente
    }
  }, [fetchInstances]);

  // Delete instance com confirma√ß√£o
  const deleteInstance = useCallback(async (instanceId: string) => {
    try {
      console.log('[Hook] üóëÔ∏è CORRE√á√ÉO CR√çTICA - Removendo inst√¢ncia:', instanceId);
      
      const result = await WhatsAppWebService.deleteInstance(instanceId);
      
      if (result.success) {
        console.log('[Hook] ‚úÖ CORRE√á√ÉO CR√çTICA - Inst√¢ncia removida com sucesso');
        toast.success('Inst√¢ncia removida com sucesso!');
        await fetchInstances();
      } else {
        throw new Error(result.error || 'Falha ao remover inst√¢ncia');
      }
    } catch (error: any) {
      console.error('[Hook] ‚ùå CORRE√á√ÉO CR√çTICA - Erro ao remover inst√¢ncia:', error);
      toast.error(`Erro ao remover inst√¢ncia: ${error.message}`);
    }
  }, [fetchInstances]);

  // CORRE√á√ÉO CR√çTICA: Refresh QR code com valida√ß√£o sincronizada
  const refreshQRCode = useCallback(async (instanceId: string) => {
    try {
      console.log('[Hook] üîÑ CORRE√á√ÉO CR√çTICA - Atualizando QR Code sincronizado para inst√¢ncia:', instanceId);
      
      const result = await WhatsAppWebService.getQRCode(instanceId);
      
      if (result.success && result.qrCode) {
        console.log('[Hook] ‚úÖ CORRE√á√ÉO CR√çTICA - QR Code sincronizado atualizado com sucesso');
        toast.success('QR Code atualizado com sucesso!');
        
        // CORRE√á√ÉO CR√çTICA: Atualizar lista ap√≥s obter QR Code
        await fetchInstances();
        
        return {
          success: true,
          qrCode: result.qrCode
        };
      } else if (result.waiting) {
        console.log('[Hook] ‚è≥ CORRE√á√ÉO CR√çTICA - QR Code ainda sendo gerado pela VPS');
        toast.info('QR Code ainda est√° sendo gerado, aguarde...');
        return null;
      } else {
        throw new Error(result.error || 'VPS n√£o forneceu QR Code');
      }
    } catch (error: any) {
      console.error('[Hook] ‚ùå CORRE√á√ÉO CR√çTICA - Erro ao atualizar QR Code:', error);
      toast.error(`Erro ao atualizar QR Code: ${error.message}`);
      return null;
    }
  }, [fetchInstances]);

  return {
    createInstance,
    deleteInstance,
    refreshQRCode
  };
};
