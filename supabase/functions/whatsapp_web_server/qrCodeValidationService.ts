
import { corsHeaders } from './config.ts';

export async function validateQRCodeParams(instanceId: string, userId: string) {
  if (!instanceId || typeof instanceId !== 'string') {
    console.error('[QR Validation] ‚ùå ERRO CR√çTICO: instanceId inv√°lido:', instanceId);
    throw new Error('Instance ID √© obrigat√≥rio e deve ser uma string v√°lida');
  }

  if (!userId || typeof userId !== 'string') {
    console.error('[QR Validation] ‚ùå ERRO CR√çTICO: userId inv√°lido:', userId);
    throw new Error('User ID √© obrigat√≥rio e deve ser uma string v√°lida');
  }

  console.log('[QR Validation] ‚úÖ Par√¢metros validados com sucesso');
}

export async function validateInstanceAccess(supabase: any, instanceId: string, userId: string) {
  console.log('[QR Validation] üîç Buscando inst√¢ncia no banco...');
  
  const { data: instance, error: instanceError } = await supabase
    .from('whatsapp_instances')
    .select('vps_instance_id, company_id, qr_code, instance_name, connection_status, web_status')
    .eq('id', instanceId)
    .maybeSingle();

  if (instanceError) {
    console.error('[QR Validation] ‚ùå ERRO NO BANCO (inst√¢ncia):', instanceError);
    throw new Error(`Erro ao buscar inst√¢ncia: ${instanceError.message}`);
  }

  if (!instance) {
    console.error('[QR Validation] ‚ùå INST√ÇNCIA N√ÉO ENCONTRADA:', instanceId);
    throw new Error('Inst√¢ncia n√£o encontrada no banco de dados');
  }

  console.log('[QR Validation] ‚úÖ Inst√¢ncia encontrada:', {
    id: instanceId,
    name: instance.instance_name,
    vpsInstanceId: instance.vps_instance_id,
    connectionStatus: instance.connection_status,
    webStatus: instance.web_status,
    hasQrCode: !!instance.qr_code
  });

  // Validar acesso do usu√°rio
  console.log('[QR Validation] üîê Validando acesso do usu√°rio...');
  
  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('company_id')
    .eq('id', userId)
    .maybeSingle();

  if (profileError) {
    console.error('[QR Validation] ‚ùå ERRO NO BANCO (profile):', profileError);
    throw new Error(`Erro ao buscar perfil do usu√°rio: ${profileError.message}`);
  }

  if (!profile) {
    console.error('[QR Validation] ‚ùå PERFIL DO USU√ÅRIO N√ÉO ENCONTRADO:', userId);
    throw new Error('Perfil do usu√°rio n√£o encontrado');
  }

  if (profile.company_id !== instance.company_id) {
    console.error('[QR Validation] ‚ùå ACESSO NEGADO:', {
      userCompany: profile.company_id,
      instanceCompany: instance.company_id
    });
    throw new Error('Usu√°rio n√£o tem acesso a esta inst√¢ncia');
  }

  console.log('[QR Validation] ‚úÖ Acesso validado com sucesso');
  
  return instance;
}
