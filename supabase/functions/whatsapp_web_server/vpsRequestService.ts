
import { VPS_CONFIG, getVPSHeaders } from './config.ts';

// Fun√ß√£o de requisi√ß√£o VPS com retry melhorado
export async function makeVPSRequest(url: string, options: RequestInit): Promise<Response> {
  console.log('[VPS Request] üì° Fazendo requisi√ß√£o para:', url);
  console.log('[VPS Request] üìã Options:', JSON.stringify(options, null, 2));
  
  let lastError: Error;
  
  for (let attempt = 1; attempt <= VPS_CONFIG.retries; attempt++) {
    try {
      console.log(`[VPS Request] üîÑ Tentativa ${attempt}/${VPS_CONFIG.retries}`);
      
      const response = await fetch(url, {
        ...options,
        signal: AbortSignal.timeout(VPS_CONFIG.timeout)
      });
      
      console.log(`[VPS Request] üì• Resposta recebida - Status: ${response.status}`);
      
      // Se a resposta foi bem-sucedida, retornar imediatamente
      if (response.ok) {
        console.log(`[VPS Request] ‚úÖ Sucesso na tentativa ${attempt}`);
        return response;
      }
      
      // Para erros 4xx, n√£o tentar novamente (erro de configura√ß√£o)
      if (response.status >= 400 && response.status < 500) {
        console.error(`[VPS Request] ‚ùå Erro 4xx (n√£o retent√°vel): ${response.status}`);
        return response;
      }
      
      // Para outros erros, tentar novamente
      const errorText = await response.text();
      console.warn(`[VPS Request] ‚ö†Ô∏è Erro ${response.status} na tentativa ${attempt}: ${errorText}`);
      lastError = new Error(`HTTP ${response.status}: ${errorText}`);
      
    } catch (error) {
      console.error(`[VPS Request] üí• Erro na tentativa ${attempt}:`, error);
      lastError = error as Error;
    }
    
    // Aguardar antes da pr√≥xima tentativa (exceto na √∫ltima)
    if (attempt < VPS_CONFIG.retries) {
      const delay = 2000 * attempt; // Delay progressivo
      console.log(`[VPS Request] ‚è≥ Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  console.error(`[VPS Request] üí• Todas as ${VPS_CONFIG.retries} tentativas falharam`);
  throw lastError!;
}

// Fun√ß√£o espec√≠fica para criar inst√¢ncia na VPS
export async function createVPSInstance(payload: any): Promise<any> {
  console.log('[VPS Create] üöÄ Criando inst√¢ncia na VPS:', payload);
  
  try {
    const response = await makeVPSRequest(`${VPS_CONFIG.baseUrl}/instance/create`, {
      method: 'POST',
      headers: getVPSHeaders(),
      body: JSON.stringify(payload)
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('[VPS Create] ‚úÖ Inst√¢ncia criada com sucesso:', data);
      return {
        success: true,
        vpsInstanceId: payload.instanceId,
        qrCode: data.qrCode || null,
        ...data
      };
    } else {
      const errorText = await response.text();
      console.error('[VPS Create] ‚ùå Falha ao criar inst√¢ncia:', errorText);
      throw new Error(`VPS creation failed: ${response.status} - ${errorText}`);
    }
  } catch (error) {
    console.error('[VPS Create] üí• Erro cr√≠tico:', error);
    throw error;
  }
}
